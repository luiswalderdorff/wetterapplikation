{"version":3,"sources":["components/Title.js","components/WeatherComponent.js","components/WeatherWrapper.js","components/SearchBar.js","App.js","serviceWorker.js","index.js"],"names":["Title","WeatherComponent","changeClickedState","state","clicked","setState","this","props","city","index","removeCity","name","className","onClick","weather","description","src","icon","alt","temperature","feelsLike","minTemp","maxTemp","pressure","humidity","Component","WeatherWrapper","weatherArray","map","key","SearchBar","getCity","id","type","placeholder","document","getElementById","value","App","fetch","then","response","json","push","main","temp","feels_like","temp_min","temp_max","localStorage","setItem","JSON","stringify","catch","err","console","log","splice","getItem","weatherString","parse","forEach","addEventListener","event","keyCode","preventDefault","click","onInputChange","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","ReactDOM","render","URL","process","href","origin","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.0a94fd6f.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Title = () => {\r\n\treturn (\r\n\t\t<h1>Wetterapplikation</h1>\r\n\t)\r\n}\r\n\r\nexport default Title;","import React, { Component } from \"react\";\r\n\r\nclass WeatherComponent extends Component {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\tclicked: false\r\n\t\t}\r\n\t}\r\n\t// Used to switch from simple to detailed side\r\n\tchangeClickedState = () => {\r\n\t\tif (this.state.clicked === false) {\r\n\t\t\tthis.setState({clicked: true})\r\n\t\t} else {\r\n\t\t\tthis.setState({clicked: false})\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\tconst { city, index, removeCity } = this.props;\r\n\t/*Only renders this once a city name is fetched, to avoid errors*/\r\n\t\tif (city.name) {\r\n\t\t\t/*every item on the list has two sides, simple and detailed. Are switched by clicking */\r\n\t\t\tif (this.state.clicked === false) {\r\n\t\t\t\treturn (\r\n\t\t\t\t<div className=\"flex items-center pa3 justify-around ba b--dotted ma3\">\r\n\t\t\t\t\t<div className=\"flex flex-column w-50 tc\"> \r\n\t\t\t\t\t<div onClick={this.changeClickedState}>\r\n\t\t\t\t\t\t<div className=\"city-name tc b pa1\">{ city.name } (mehr Info)</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"weather-description tc pa1\">{city.weather.description}</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"flex items-center w-50 justify-center\">\r\n\t\t\t\t\t\t<img src={`http://openweathermap.org/img/w/${city.weather.icon}.png`} alt=\"A weather icon\" />\r\n\t\t\t\t\t\t<div className=\"temperature tc pa2\">{city.temperature}°C</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"pointer b\">\r\n\t\t\t\t\t\t<div onClick={() => removeCity(index)}>×</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t)\r\n\t\t\t} else {\r\n\t\t\t\treturn (\r\n\t\t\t\t<div className=\"flex-wrap items-center pa3 justify-around ba b--dotted ma3\">\r\n\t\t\t\t\t<div onClick={this.changeClickedState}>\r\n\t\t\t\t\t\t<div className=\"city-name tc b pa1\">{ city.name } (weniger Info)</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"weather-description tc pa1\">{city.weather.description}</div>\r\n\t\t\t\t\t<div className=\"temperature tc pa2\">Temperatur: {city.temperature}°C</div>\r\n\t\t\t\t\t<div className=\"tc pa2\">Gefühlt: {city.feelsLike}°C</div>\r\n\t\t\t\t\t<div className=\"tc pa2\">Min: {city.minTemp}°C</div>\r\n\t\t\t\t\t<div className=\"tc pa2\">Max: {city.maxTemp}°C</div>\r\n\t\t\t\t\t<div className=\"tc pa2\">Luftdruck: {city.pressure} hPA</div>\r\n\t\t\t\t\t<div className=\"tc pa2\">Luftfeuchtigkeit: {city.humidity}%</div>\r\n\t\t\t\t\t<div className=\"pa2 tc b\"><div className=\"pointer\" onClick={() => removeCity(index)}>×</div></div>\r\n\t\t\t\t</div>\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\treturn (\r\n\t\t\t\t<div>Hi</div>\r\n\t\t\t)\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default WeatherComponent;","// Could switch to full info with React Routes\r\n\r\nimport React from \"react\";\r\nimport WeatherComponent from \"./WeatherComponent\";\r\n\r\n// Hier später einen array an infos haben und damit mehrere Weathercomponents erstellen, je nach grösse des arrays\r\nconst WeatherWrapper = ( { weatherArray, removeCity } ) => {\r\n\treturn (\r\n\t\t<div className=\"w-90\">\r\n\t{/*displays every city from the weatherArray array*/}\r\n\t\t\t\t{weatherArray.map(function(city, index) {\r\n\t\t\t\t\treturn <WeatherComponent city={ city } key={ index } index={ index } removeCity={ removeCity } />\r\n\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default WeatherWrapper;","import React from \"react\";\r\n\r\nconst SearchBar = ({ getCity }) => {\r\n\t//clear input field after pressing button\r\n\tfunction clearFields() {\r\n\t     document.getElementById(\"myInput\").value = \"\";\r\n\t}\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<input id=\"myInput\" type=\"text\" placeholder=\"Stadt hinzufügen\" />\r\n\t\t\t<button id=\"myBtn\" onClick={() => {getCity(document.getElementById('myInput').value); clearFields()}}>OK</button>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default SearchBar;","import React, {Component} from 'react';\nimport Title from \"./components/Title\";\nimport WeatherWrapper from \"./components/WeatherWrapper\";\nimport SearchBar from \"./components/SearchBar\";\n\nclass App extends Component {\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tweatherArray: []\n\t\t}\n\t}\n\n\t// get city from openweather\n\tgetCity = (city) => {\n\t\tfetch(`https://cors-anywhere.herokuapp.com/http://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&lang=de&APPID=761b91c920e9201fba7da16e3aa16206`)\n\t\t\t.then(response => response.json())\n\t\t\t.then(response => {\n\t\t\t\t// adds new city to array, updates state and localstorage\n\t\t\t\tlet weatherArray = this.state.weatherArray;\n\t\t\t\tweatherArray.push({name: response.name, temperature: response.main.temp, weather: response.weather[0], feelsLike: response.main.feels_like, minTemp: response.main.temp_min, maxTemp: response.main.temp_max, pressure: response.main.pressure, humidity: response.main.humidity});\n\t\t\t\tthis.setState({ weatherArray });\n\t\t\t\tlocalStorage.setItem(\"weatherArray\", JSON.stringify(weatherArray));\n\t\t\t})\n\t\t\t.catch(err => console.log(err));\n\t}\n\n\t// removes city from array, updates state and localstorage\n\tremoveCity = (index) => {\n\t\tlet weatherArray = this.state.weatherArray;\n\t\tweatherArray.splice(index, 1);\n\t\tthis.setState({ weatherArray });\n\t\tlocalStorage.setItem(\"weatherArray\", JSON.stringify(weatherArray));\n\t}\n\n\tcomponentDidMount() {\n\t\t// If localstorage from last session is available use that. Else, search for dresden\n\t\tif (localStorage.getItem(\"weatherArray\")) {\n\t\t\tconst weatherString = localStorage.getItem(\"weatherArray\");\n\t\t\tconst weatherArray = JSON.parse(weatherString);\n\t\t\tweatherArray.forEach((city,index) => {\n\t\t\t\tthis.getCity(city.name);\n\t\t\t});\n\t\t} else {\n\t\t\tthis.getCity(\"dresden\");\n\t\t}\n\n\t\t// Press enter to start search\n\t\tvar input = document.getElementById(\"myInput\");\n\t\tinput.addEventListener(\"keyup\", function(event) {\n\t\t  if (event.keyCode === 13) {\n\t\t    event.preventDefault();\n\t\t    document.getElementById(\"myBtn\").click();\n\t\t  }\n\t\t});\n\t}\n\n  render() {\n  \tconst { weatherArray } = this.state;\n    return(\n      <div className=\"App flex flex-column items-center avenir\">\n        <Title />\n        <WeatherWrapper weatherArray={ weatherArray } removeCity={ this.removeCity } />\n        <SearchBar getCity={ this.getCity } onInputChange={ this.onInputChange } />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"tachyons\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}