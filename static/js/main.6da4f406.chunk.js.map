{"version":3,"sources":["components/Title.js","components/WeatherComponent.js","components/WeatherWrapper.js","components/SearchBar.js","App.js","serviceWorker.js","index.js"],"names":["Title","WeatherComponent","changeClickedState","state","clicked","setState","this","props","city","index","removeCity","name","className","href","onClick","weather","description","src","icon","alt","temperature","feelsLike","minTemp","maxTemp","pressure","humidity","Component","WeatherWrapper","weatherArray","map","key","SearchBar","getCity","onInputChange","type","placeholder","onChange","App","fetch","input","then","response","json","console","log","push","main","temp","feels_like","temp_min","temp_max","catch","err","splice","event","target","value","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.6da4f406.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Title = () => {\r\n\treturn (\r\n\t\t<h1>Wetterapplikation</h1>\r\n\t)\r\n}\r\n\r\nexport default Title;","import React, { Component } from \"react\";\r\n\r\nclass WeatherComponent extends Component {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\tclicked: false\r\n\t\t}\r\n\t}\r\n\r\n\tchangeClickedState = () => {\r\n\t\tif (this.state.clicked === false) {\r\n\t\t\tthis.setState({clicked: true})\r\n\t\t} else {\r\n\t\t\tthis.setState({clicked: false})\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\tconst { city, index, removeCity } = this.props;\r\n\t\tif (city.name) {\r\n\t\t\tif (this.state.clicked === false) {\r\n\t\t\t\treturn (\r\n\t\t\t\t<div className=\"flex items-center pa3 justify-around ba b--dotted ma3\">\r\n\t\t\t\t\t<div className=\"flex flex-column w-50 tc\"> \r\n\t\t\t\t\t<a href=\"#\" onClick={this.changeClickedState}>\r\n\t\t\t\t\t\t<div className=\"city-name tc b pa1\">{ city.name } (mehr Info)</div>\r\n\t\t\t\t\t</a>\r\n\t\t\t\t\t\t<div className=\"weather-description tc pa1\">{city.weather.description}</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"flex items-center w-50 justify-center\">\r\n\t\t\t\t\t\t<img src={`http://openweathermap.org/img/w/${city.weather.icon}.png`} alt=\"A weather icon\" />\r\n\t\t\t\t\t\t<div className=\"temperature tc pa2\">{city.temperature}°C</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"pointer b\">\r\n\t\t\t\t\t\t<a onClick={() => removeCity(index)}>×</a>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t)\r\n\t\t\t} else {\r\n\t\t\t\treturn (\r\n\t\t\t\t<div className=\"flex-wrap items-center pa3 justify-around ba b--dotted ma3\">\r\n\t\t\t\t\t<a href=\"#\" onClick={this.changeClickedState}>\r\n\t\t\t\t\t\t<div className=\"city-name tc b pa1\">{ city.name } (weniger Info)</div>\r\n\t\t\t\t\t</a>\r\n\t\t\t\t\t<div className=\"weather-description tc pa1\">{city.weather.description}</div>\r\n\t\t\t\t\t<div className=\"temperature tc pa2\">Temperatur: {city.temperature}°C</div>\r\n\t\t\t\t\t<div className=\"tc pa2\">Gefühlt: {city.feelsLike}°C</div>\r\n\t\t\t\t\t<div className=\"tc pa2\">Min: {city.minTemp}°C</div>\r\n\t\t\t\t\t<div className=\"tc pa2\">Max: {city.maxTemp}°C</div>\r\n\t\t\t\t\t<div className=\"tc pa2\">Luftdruck: {city.pressure} hPA</div>\r\n\t\t\t\t\t<div className=\"tc pa2\">Luftfeuchtigkeit: {city.humidity}%</div>\r\n\t\t\t\t\t<div className=\"pa2 tc b\"><a className=\"pointer\" onClick={() => removeCity(index)}>×</a></div>\r\n\t\t\t\t</div>\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\treturn (\r\n\t\t\t\t<div>Hi</div>\r\n\t\t\t)\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default WeatherComponent;","// Could switch to full info with React Routes\r\n\r\nimport React from \"react\";\r\nimport WeatherComponent from \"./WeatherComponent\";\r\n\r\n// Hier später einen array an infos haben und damit mehrere Weathercomponents erstellen, je nach grösse des arrays\r\nconst WeatherWrapper = ( { weatherArray, removeCity } ) => {\r\n\treturn (\r\n\t\t<div className=\"w-90\">\r\n\t\t\t\t{weatherArray.map(function(city, index) {\r\n\t\t\t\t\treturn <WeatherComponent city={ city } key={ index } index={ index } removeCity={ removeCity } />\r\n\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default WeatherWrapper;","import React from \"react\";\r\n\r\nconst SearchBar = ({ getCity, onInputChange }) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<input type=\"text\" placeholder=\"Stadt hinzufügen\" onChange={onInputChange} />\r\n\t\t\t<button onClick={getCity}>Hinzufügen</button>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default SearchBar;","import React, {Component} from 'react';\nimport Title from \"./components/Title\";\nimport WeatherWrapper from \"./components/WeatherWrapper\";\nimport SearchBar from \"./components/SearchBar\";\n\nclass App extends Component {\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tinput: \"Dresden\",\n\t\t\tweatherArray: []\n\t\t}\n\t}\n\n\tgetCity = () => {\n\t\tfetch(`https://cors-anywhere.herokuapp.com/http://api.openweathermap.org/data/2.5/weather?q=${this.state.input}&units=metric&lang=de&APPID=761b91c920e9201fba7da16e3aa16206`)\n\t\t\t.then(response => response.json())\n\t\t\t.then(response => {\n\t\t\t\tconsole.log(response);\n\t\t\t\tlet weatherArray = [...this.state.weatherArray];\n\t\t\t\tweatherArray.push({name: response.name, temperature: response.main.temp, weather: response.weather[0], feelsLike: response.main.feels_like, minTemp: response.main.temp_min, maxTemp: response.main.temp_max, pressure: response.main.pressure, humidity: response.main.humidity});\n\t\t\t\tthis.setState({ weatherArray });\n\t\t\t\tconsole.log(this.state.weatherArray);\n\t\t\t})\n\t\t\t.catch(err => console.log(err));\n\t}\n\n\tremoveCity = (index) => {\n\t\tlet weatherArray = [...this.state.weatherArray];\n\t\tweatherArray.splice(index, 1);\n\t\tthis.setState({ weatherArray });\n\t}\n\n\tonInputChange = (event) => {\n\t\tthis.setState({input: event.target.value});\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.getCity(\"dresden\");\n\t}\n\n  render() {\n  \tconst { weatherArray } = this.state;\n    return(\n      <div className=\"App flex flex-column items-center avenir\">\n        <Title />\n        <WeatherWrapper weatherArray={ weatherArray } removeCity={ this.removeCity } />\n        <SearchBar getCity={ this.getCity } onInputChange={ this.onInputChange } />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"tachyons\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}